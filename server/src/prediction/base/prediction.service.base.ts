/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import { Prisma, Prediction, Tag } from "@prisma/client";

export class PredictionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.PredictionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PredictionFindManyArgs>
  ): Promise<number> {
    return this.prisma.prediction.count(args);
  }

  async findMany<T extends Prisma.PredictionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PredictionFindManyArgs>
  ): Promise<Prediction[]> {
    return this.prisma.prediction.findMany(args);
  }
  async findOne<T extends Prisma.PredictionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PredictionFindUniqueArgs>
  ): Promise<Prediction | null> {
    return this.prisma.prediction.findUnique(args);
  }
  async create<T extends Prisma.PredictionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PredictionCreateArgs>
  ): Promise<Prediction> {
    return this.prisma.prediction.create<T>(args);
  }
  async update<T extends Prisma.PredictionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PredictionUpdateArgs>
  ): Promise<Prediction> {
    return this.prisma.prediction.update<T>(args);
  }
  async delete<T extends Prisma.PredictionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PredictionDeleteArgs>
  ): Promise<Prediction> {
    return this.prisma.prediction.delete(args);
  }

  async findTags(
    parentId: string,
    args: Prisma.TagFindManyArgs
  ): Promise<Tag[]> {
    return this.prisma.prediction
      .findUnique({
        where: { id: parentId },
      })
      .tags(args);
  }
}
